#!/usr/bin/env node

var program = require('commander')
var Spinal = require('../').Node
var Broker = require('../').Broker
var spinal = null
var package = require('../package.json')

function start(options, cb){
  spinal = new Spinal(options.broker, {
    namespace: '$cli'
  })
  spinal.start(cb)
}

function parseData(data){
  if(typeof data == 'undefined') data = 'null'
  try {
    return eval('('+data+')')
  } catch(e) {
    console.error('Error on parsing argumnet data in JSON')
    console.error(e)
    process.exit(1)
  }
}

program
  .version(package.version)
  // .option('-n, --namespace [name]', 'Namespace if leave blank will connect in anonymous mode', /^(large|medium|small)$/i, '$cli')
  // .option('-b, --broker [broker]', 'Broker URI', /^([A-z0-9]+)$/, 'spinal://localhost:7557')

program
  .command('console')
  .description('run javascript console with spinal enviroment')
  .action(function(){
    start(function(){
      require('../lib/cli/repl')
    })
  })

program
  .command('call <method> [data]')
  .option('-b, --broker [broker]', 'Broker URI', 'spinal://localhost:7557')
  .option('-t, --timeout [miliseconds]', 'Request Timeout in miliseconds', /^([0-9]+)$/, '10000')
  .description('call spinal method')
  .action(function(method, data, options){
    data = parseData(data)
    call_options = {}
    call_options.timeout = parseInt(options.timeout)
    start(options, function(){
      spinal.call(method, data, call_options, function(err,data){
        if(err){
          console.error(err)
          process.exit(1)
        }
        process.stdout.write(JSON.stringify(data) + '\n')
        process.exit(0)
      })
    })
  })

program
  .command('job <name> [data]')
  .description('create a job')
  .option('-b, --broker [broker]', 'Broker URI', 'spinal://localhost:7557')
  .option('--priority [priority]', 'Job prioirty low, normal, medium, high, critical', /^(low|normal|medium|high|critical)$/, 'normal')
  .option('--attempts [times]', 'Try to attempts after job failed', /^([0-9]+)$/, 1)
  .option('--ttl, --timeout [miliseconds]', 'Job timeout in miliseconds', /^([0-9]+)$/)
  .option('--delay [miliseconds]', 'Delay before start a job', /^([0-9]+)$/)
  .option('--backoff [miliseconds]', 'Delay retry job after job failed', /^([0-9]+)$/)
  .action(function(name, data, options){
    start(options, function(){
      data = parseData(data)

      // if(options.attempts) options.attempts = parseInt(options.attempts)
      // if(options.ttl) options.ttl = parseInt(options.ttl)
      // if(options.delay) options.delay = parseInt(options.delay)
      // if(options.backoff) options.backoff = parseInt(options.backoff)

      var job = spinal.job(name, data)
      .priority(options.priority)
      .attempts(options.attempts)
      .ttl(options.ttl)
      .delay(options.delay)
      .backoff(options.backoff)
      .save(function(err, job_id){
        if(err){
          console.error(err)
          process.exit(1)
        }
        console.log('Job created ' + job_id)
        process.exit(0)
      })
    })
  })

program
  .command('broker')
  .description('start a broker service')
  .option('-d, --default', 'init broker with redis and default port')
  .option('-p, --port [port]', 'Port for broker service default at 7557', /^([0-9]+)$/, 7557)
  .option('-a, --api [port]', 'Port for dashboard and api service', /^([0-9]+)$/)
  .option('-r, --redis [url]', 'Redis address url')
  .action(function(options){
    var port = options.port
    if(options.default){
      var redis = 6379
      var restapi = 7577
    } else {
      var redis = options.redis
      var restapi = options.api
    }
    var broker = new Broker({
      redis: redis,
      restapi: restapi
    })
    broker.start(port, function(){
      console.log('Spinal:Broker listening... '
        + this.port
        + (redis ? ' - with redis' : ''))
    })
  })

program.parse(process.argv)
if (!process.argv.slice(2).length) program.outputHelp()
